"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.24
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ecotaxa_py_client.api_client import ApiClient, Endpoint as _Endpoint
from ecotaxa_py_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ecotaxa_py_client.model.body_export_object_set_object_set_export_post import BodyExportObjectSetObjectSetExportPost
from ecotaxa_py_client.model.body_predict_object_set_object_set_predict_post import BodyPredictObjectSetObjectSetPredictPost
from ecotaxa_py_client.model.bulk_update_req import BulkUpdateReq
from ecotaxa_py_client.model.classify_auto_req import ClassifyAutoReq
from ecotaxa_py_client.model.classify_req import ClassifyReq
from ecotaxa_py_client.model.export_rsp import ExportRsp
from ecotaxa_py_client.model.http_validation_error import HTTPValidationError
from ecotaxa_py_client.model.object_set_query_rsp import ObjectSetQueryRsp
from ecotaxa_py_client.model.object_set_revert_to_history_rsp import ObjectSetRevertToHistoryRsp
from ecotaxa_py_client.model.object_set_summary_rsp import ObjectSetSummaryRsp
from ecotaxa_py_client.model.prediction_rsp import PredictionRsp
from ecotaxa_py_client.model.project_filters import ProjectFilters


class ObjectsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.classify_auto_object_set_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/classify_auto',
                'operation_id': 'classify_auto_object_set',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'classify_auto_req',
                ],
                'required': [
                    'classify_auto_req',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'classify_auto_req':
                        (ClassifyAutoReq,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'classify_auto_req': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.classify_object_set_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/classify',
                'operation_id': 'classify_object_set',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'classify_req',
                ],
                'required': [
                    'classify_req',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'classify_req':
                        (ClassifyReq,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'classify_req': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.erase_object_set_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/',
                'operation_id': 'erase_object_set',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_body',
                ],
                'required': [
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.export_object_set_endpoint = _Endpoint(
            settings={
                'response_type': (ExportRsp,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/export',
                'operation_id': 'export_object_set',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body_export_object_set_object_set_export_post',
                ],
                'required': [
                    'body_export_object_set_object_set_export_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body_export_object_set_object_set_export_post':
                        (BodyExportObjectSetObjectSetExportPost,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body_export_object_set_object_set_export_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_object_set_endpoint = _Endpoint(
            settings={
                'response_type': (ObjectSetQueryRsp,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/{project_id}/query',
                'operation_id': 'get_object_set',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'project_filters',
                    'fields',
                    'order_field',
                    'window_start',
                    'window_size',
                ],
                'required': [
                    'project_id',
                    'project_filters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (int,),
                    'project_filters':
                        (ProjectFilters,),
                    'fields':
                        (str,),
                    'order_field':
                        (str,),
                    'window_start':
                        (int,),
                    'window_size':
                        (int,),
                },
                'attribute_map': {
                    'project_id': 'project_id',
                    'fields': 'fields',
                    'order_field': 'order_field',
                    'window_start': 'window_start',
                    'window_size': 'window_size',
                },
                'location_map': {
                    'project_id': 'path',
                    'project_filters': 'body',
                    'fields': 'query',
                    'order_field': 'query',
                    'window_start': 'query',
                    'window_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_object_set_summary_endpoint = _Endpoint(
            settings={
                'response_type': (ObjectSetSummaryRsp,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/{project_id}/summary',
                'operation_id': 'get_object_set_summary',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'only_total',
                    'project_filters',
                ],
                'required': [
                    'project_id',
                    'only_total',
                    'project_filters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (int,),
                    'only_total':
                        (bool,),
                    'project_filters':
                        (ProjectFilters,),
                },
                'attribute_map': {
                    'project_id': 'project_id',
                    'only_total': 'only_total',
                },
                'location_map': {
                    'project_id': 'path',
                    'only_total': 'query',
                    'project_filters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.predict_object_set_endpoint = _Endpoint(
            settings={
                'response_type': (PredictionRsp,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/predict',
                'operation_id': 'predict_object_set',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body_predict_object_set_object_set_predict_post',
                ],
                'required': [
                    'body_predict_object_set_object_set_predict_post',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body_predict_object_set_object_set_predict_post':
                        (BodyPredictObjectSetObjectSetPredictPost,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body_predict_object_set_object_set_predict_post': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.query_object_set_parents_endpoint = _Endpoint(
            settings={
                'response_type': (ObjectSetQueryRsp,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/parents',
                'operation_id': 'query_object_set_parents',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_body',
                ],
                'required': [
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.reclassify_object_set_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/{project_id}/reclassify',
                'operation_id': 'reclassify_object_set',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'forced_id',
                    'reason',
                    'project_filters',
                ],
                'required': [
                    'project_id',
                    'forced_id',
                    'reason',
                    'project_filters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (int,),
                    'forced_id':
                        (int,),
                    'reason':
                        (str,),
                    'project_filters':
                        (ProjectFilters,),
                },
                'attribute_map': {
                    'project_id': 'project_id',
                    'forced_id': 'forced_id',
                    'reason': 'reason',
                },
                'location_map': {
                    'project_id': 'path',
                    'forced_id': 'query',
                    'reason': 'query',
                    'project_filters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.reset_object_set_to_predicted_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/{project_id}/reset_to_predicted',
                'operation_id': 'reset_object_set_to_predicted',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'project_filters',
                ],
                'required': [
                    'project_id',
                    'project_filters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (int,),
                    'project_filters':
                        (ProjectFilters,),
                },
                'attribute_map': {
                    'project_id': 'project_id',
                },
                'location_map': {
                    'project_id': 'path',
                    'project_filters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.revert_object_set_to_history_endpoint = _Endpoint(
            settings={
                'response_type': (ObjectSetRevertToHistoryRsp,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/{project_id}/revert_to_history',
                'operation_id': 'revert_object_set_to_history',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_id',
                    'dry_run',
                    'project_filters',
                    'target',
                ],
                'required': [
                    'project_id',
                    'dry_run',
                    'project_filters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_id':
                        (int,),
                    'dry_run':
                        (bool,),
                    'project_filters':
                        (ProjectFilters,),
                    'target':
                        (int,),
                },
                'attribute_map': {
                    'project_id': 'project_id',
                    'dry_run': 'dry_run',
                    'target': 'target',
                },
                'location_map': {
                    'project_id': 'path',
                    'dry_run': 'query',
                    'project_filters': 'body',
                    'target': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_object_set_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'BearerOrCookieAuth'
                ],
                'endpoint_path': '/object_set/update',
                'operation_id': 'update_object_set',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bulk_update_req',
                ],
                'required': [
                    'bulk_update_req',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bulk_update_req':
                        (BulkUpdateReq,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bulk_update_req': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def classify_auto_object_set(
        self,
        classify_auto_req,
        **kwargs
    ):
        """Classify Auto Object Set  # noqa: E501

        **Set automatic classification** of a set of objects.  **Returns the number of updated entities.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.classify_auto_object_set(classify_auto_req, async_req=True)
        >>> result = thread.get()

        Args:
            classify_auto_req (ClassifyAutoReq):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['classify_auto_req'] = \
            classify_auto_req
        return self.classify_auto_object_set_endpoint.call_with_http_info(**kwargs)

    def classify_object_set(
        self,
        classify_req,
        **kwargs
    ):
        """Classify Object Set  # noqa: E501

        **Change classification and/or qualification for a set of objects.**  **Returns the number of updated entities.**  🔒 Current user needs at *least Annotate* right on all projects of specified objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.classify_object_set(classify_req, async_req=True)
        >>> result = thread.get()

        Args:
            classify_req (ClassifyReq):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['classify_req'] = \
            classify_req
        return self.classify_object_set_endpoint.call_with_http_info(**kwargs)

    def erase_object_set(
        self,
        request_body,
        **kwargs
    ):
        """Erase Object Set  # noqa: E501

        **Delete the objects with given object ids.**   **Returns** the number of  : **deleted objects**, 0, **deleated image rows** and **deleated image files**.  🔒 Current user needs *Manage* right on all projects of specified objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.erase_object_set(request_body, async_req=True)
        >>> result = thread.get()

        Args:
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['request_body'] = \
            request_body
        return self.erase_object_set_endpoint.call_with_http_info(**kwargs)

    def export_object_set(
        self,
        body_export_object_set_object_set_export_post,
        **kwargs
    ):
        """Export Object Set  # noqa: E501

        **Start an export job for the given object set and options.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_object_set(body_export_object_set_object_set_export_post, async_req=True)
        >>> result = thread.get()

        Args:
            body_export_object_set_object_set_export_post (BodyExportObjectSetObjectSetExportPost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ExportRsp
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body_export_object_set_object_set_export_post'] = \
            body_export_object_set_object_set_export_post
        return self.export_object_set_endpoint.call_with_http_info(**kwargs)

    def get_object_set(
        self,
        project_id,
        project_filters,
        **kwargs
    ):
        """Get Object Set  # noqa: E501

        Returns **filtred object Ids** for the given project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_object_set(project_id, project_filters, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (int): Internal, numeric id of the project.
            project_filters (ProjectFilters):

        Keyword Args:
            fields (str):   Specify the needed object (and ancilliary entities) fields.                     It follows the naming convention 'prefix.field' : Prefix is either 'obj' for main object, 'fre' for free fields, 'img' for the visible image.  The column obj.imgcount contains the total count of images for the object.  Use a comma to separate fields.        💡 More help :  You can get the field labels by parsing the classiffieldlist returned by a call to https://ecotaxa.obs-vlfr.fr/api/docs#/projects/project_query_projects__project_id__get.  **Note that the following fields must be prefixed with the header \"obj.\"** (for example → obj.orig_id):  acquisid classif_auto_id, classif_auto_score, classif_auto_when, classif_crossvalidation_id, classif_id, classif_qual, classif_who, classif_when, complement_info, depth_max, depth_min, latitude, longitude, objdate, object_link, objid, objtime, orig_id, random_value, similarity, sunpos.  **Note that the following fields must be prefixed with the header \"img.\"** (for example → img.file_name):  file_name, height, imgid, imgrank, file_name, orig, objid, file_name thumb_file_name, thumb_height, thumb_width, width.  **Note that the following fields must be prefixed with the header \"txo.\"** (for example → txo.display_name):  creation_datetime, creator_email, display_name, id, id_instance, id_source, lastupdate_datetime, name, nbrobj, nbrobjcum, parent_id, rename_to source_desc, source_url, taxostatus, taxotype.  **All other fields must be prefixed by the header \"fre.\"** (for example → fre.circ.).                    . [optional]
            order_field (str): Order the result using given field. If prefixed with \"-\" then it will be reversed.. [optional]
            window_start (int): Allows to return only a slice of the result. Skip window_start before returning data.. [optional]
            window_size (int): Allows to return only a slice of the result. Return only window_size lines.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ObjectSetQueryRsp
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['project_id'] = \
            project_id
        kwargs['project_filters'] = \
            project_filters
        return self.get_object_set_endpoint.call_with_http_info(**kwargs)

    def get_object_set_summary(
        self,
        project_id,
        only_total,
        project_filters,
        **kwargs
    ):
        """Get Object Set Summary  # noqa: E501

        For the given project, with given filters, **return the classification summary**.          i.e.:              - Total number of objects  And optionnaly  - Number of Validated ones - Number of Dubious ones - Number of Predicted ones       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_object_set_summary(project_id, only_total, project_filters, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (int): Internal, numeric id of the project.
            only_total (bool): If True, returns only the **Total number of objects**. Else returns also the **Number of validated ones**, the **number of Dubious ones** and the number of **predicted ones**.
            project_filters (ProjectFilters):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ObjectSetSummaryRsp
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['project_id'] = \
            project_id
        kwargs['only_total'] = \
            only_total
        kwargs['project_filters'] = \
            project_filters
        return self.get_object_set_summary_endpoint.call_with_http_info(**kwargs)

    def predict_object_set(
        self,
        body_predict_object_set_object_set_predict_post,
        **kwargs
    ):
        """Predict Object Set  # noqa: E501

        **Start a prediction** AKA automatic classification for the given object set and options.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.predict_object_set(body_predict_object_set_object_set_predict_post, async_req=True)
        >>> result = thread.get()

        Args:
            body_predict_object_set_object_set_predict_post (BodyPredictObjectSetObjectSetPredictPost):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PredictionRsp
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body_predict_object_set_object_set_predict_post'] = \
            body_predict_object_set_object_set_predict_post
        return self.predict_object_set_endpoint.call_with_http_info(**kwargs)

    def query_object_set_parents(
        self,
        request_body,
        **kwargs
    ):
        """Query Object Set Parents  # noqa: E501

        **Return object ids, with parent ones and projects** for the objects in given list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_object_set_parents(request_body, async_req=True)
        >>> result = thread.get()

        Args:
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ObjectSetQueryRsp
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['request_body'] = \
            request_body
        return self.query_object_set_parents_endpoint.call_with_http_info(**kwargs)

    def reclassify_object_set(
        self,
        project_id,
        forced_id,
        reason,
        project_filters,
        **kwargs
    ):
        """Reclassify Object Set  # noqa: E501

        Regardless of present classification or state, **set the new classification for this object set.**  If the filter designates \"all with given classification\", add a TaxonomyChangeLog entry.  **Returns the number of affected objects.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reclassify_object_set(project_id, forced_id, reason, project_filters, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (int): Internal, numeric id of the project.
            forced_id (int): The new classification Id.
            reason (str): The reason of this new classification.
            project_filters (ProjectFilters):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['project_id'] = \
            project_id
        kwargs['forced_id'] = \
            forced_id
        kwargs['reason'] = \
            reason
        kwargs['project_filters'] = \
            project_filters
        return self.reclassify_object_set_endpoint.call_with_http_info(**kwargs)

    def reset_object_set_to_predicted(
        self,
        project_id,
        project_filters,
        **kwargs
    ):
        """Reset Object Set To Predicted  # noqa: E501

        **Reset to Predicted** all objects for the given project with the filters.  Return **NULL upon success.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_object_set_to_predicted(project_id, project_filters, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (int): Internal, numeric id of the project.
            project_filters (ProjectFilters):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['project_id'] = \
            project_id
        kwargs['project_filters'] = \
            project_filters
        return self.reset_object_set_to_predicted_endpoint.call_with_http_info(**kwargs)

    def revert_object_set_to_history(
        self,
        project_id,
        dry_run,
        project_filters,
        **kwargs
    ):
        """Revert Object Set To History  # noqa: E501

        **Revert all objects for the given project**, with the filters, to the target.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revert_object_set_to_history(project_id, dry_run, project_filters, async_req=True)
        >>> result = thread.get()

        Args:
            project_id (int): Internal, numeric id of the project.
            dry_run (bool): If set, then no real write but consequences of the revert will be replied.
            project_filters (ProjectFilters):

        Keyword Args:
            target (int): Use null/None for reverting using the last annotation from anyone, or a user id for the last annotation from this user.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ObjectSetRevertToHistoryRsp
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['project_id'] = \
            project_id
        kwargs['dry_run'] = \
            dry_run
        kwargs['project_filters'] = \
            project_filters
        return self.revert_object_set_to_history_endpoint.call_with_http_info(**kwargs)

    def update_object_set(
        self,
        bulk_update_req,
        **kwargs
    ):
        """Update Object Set  # noqa: E501

        Do the required **update for each objects in the set.**   **Returns the number of updated entities.**  🔒 Current user needs *Manage* right on all projects of specified objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_object_set(bulk_update_req, async_req=True)
        >>> result = thread.get()

        Args:
            bulk_update_req (BulkUpdateReq):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['bulk_update_req'] = \
            bulk_update_req
        return self.update_object_set_endpoint.call_with_http_info(**kwargs)

