# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Constants(BaseModel):
    """
    Values which can be considered identical over the lifetime of the back-end.
    """ # noqa: E501
    license_texts: Optional[Dict[str, StrictStr]] = Field(default=None, description="The supported licenses and help text/links.")
    app_manager: Optional[Annotated[List[StrictStr], Field(min_length=2, max_length=2)]] = Field(default=None, description="The application manager identity (name, mail), from config file.")
    countries: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="List of known countries names.")
    user_status: Optional[Dict[str, StrictInt]] = Field(default=None, description="Application User status values")
    password_regexp: Optional[StrictStr] = Field(default='^(?:(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#?%^&*-+])).{8,20}$', description="8 char. minimum, at least one uppercase, one lowercase, one number and one special char in '#?!@%^&*-+' ")
    email_verification: Optional[StrictBool] = Field(default=True, description="Require verification before activation.")
    account_validation: Optional[StrictBool] = Field(default=False, description="Require validation by a Users Administrator before activation.")
    short_token_age: Optional[StrictInt] = Field(default=1, description="Email confirmation, password reset token lifespan.")
    profile_token_age: Optional[StrictInt] = Field(default=24, description="Profile modification token lifespan.")
    recaptchaid: Optional[StrictBool] = Field(default=False, description="use Google ReCaptcha")
    __properties: ClassVar[List[str]] = ["license_texts", "app_manager", "countries", "user_status", "password_regexp", "email_verification", "account_validation", "short_token_age", "profile_token_age", "recaptchaid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Constants from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Constants from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "license_texts": obj.get("license_texts"),
            "app_manager": obj.get("app_manager"),
            "countries": obj.get("countries"),
            "user_status": obj.get("user_status"),
            "password_regexp": obj.get("password_regexp") if obj.get("password_regexp") is not None else '^(?:(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#?%^&*-+])).{8,20}$',
            "email_verification": obj.get("email_verification") if obj.get("email_verification") is not None else True,
            "account_validation": obj.get("account_validation") if obj.get("account_validation") is not None else False,
            "short_token_age": obj.get("short_token_age") if obj.get("short_token_age") is not None else 1,
            "profile_token_age": obj.get("profile_token_age") if obj.get("profile_token_age") is not None else 24,
            "recaptchaid": obj.get("recaptchaid") if obj.get("recaptchaid") is not None else False
        })
        return _obj


