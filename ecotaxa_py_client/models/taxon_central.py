# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TaxonCentral(BaseModel):
    """
    TaxonCentral
    """ # noqa: E501
    id: StrictInt = Field(description="The unique numeric id of the taxon.")
    parent_id: Optional[StrictInt] = Field(default=None, description="The unique numeric id of the taxon parent.")
    name: StrictStr = Field(description="The name of the taxon.")
    id_source: Optional[StrictStr] = Field(default=None, description="The source ID.")
    taxotype: StrictStr = Field(description="The taxon type, 'M' for Morpho or 'P' for Phylo.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the taxon. It is suffixed in EcoTaxoServer with (Deprecated) when taxostatus is 'D'")
    lastupdate_datetime: Optional[datetime] = Field(default=None, description="Taxon last update. Date, with format YYYY-MM-DD hh:mm:ss.")
    id_instance: Optional[StrictInt] = Field(default=None, description="The instance Id.")
    taxostatus: StrictStr = Field(description="The taxon status, N for Not approved, A for Approved or D for Deprecated.")
    rename_to: Optional[StrictInt] = Field(default=None, description="The advised replacement Name if the taxon is deprecated.")
    source_url: Optional[StrictStr] = Field(default=None, description="The source url.")
    source_desc: Optional[StrictStr] = Field(default=None, description="The source description.")
    creator_email: Optional[StrictStr] = Field(default=None, description="Email of the creator of the taxon.")
    creation_datetime: Optional[datetime] = Field(default=None, description="Taxon creation date. Date, with format YYYY-MM-DD hh:mm:ss.")
    nbrobj: Optional[StrictInt] = Field(default=None, description="Number of objects in this category exactly.")
    nbrobjcum: Optional[StrictInt] = Field(default=None, description="Number of objects in this category and descendant ones.")
    __properties: ClassVar[List[str]] = ["id", "parent_id", "name", "id_source", "taxotype", "display_name", "lastupdate_datetime", "id_instance", "taxostatus", "rename_to", "source_url", "source_desc", "creator_email", "creation_datetime", "nbrobj", "nbrobjcum"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaxonCentral from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaxonCentral from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "parent_id": obj.get("parent_id"),
            "name": obj.get("name"),
            "id_source": obj.get("id_source"),
            "taxotype": obj.get("taxotype"),
            "display_name": obj.get("display_name"),
            "lastupdate_datetime": obj.get("lastupdate_datetime"),
            "id_instance": obj.get("id_instance"),
            "taxostatus": obj.get("taxostatus"),
            "rename_to": obj.get("rename_to"),
            "source_url": obj.get("source_url"),
            "source_desc": obj.get("source_desc"),
            "creator_email": obj.get("creator_email"),
            "creation_datetime": obj.get("creation_datetime"),
            "nbrobj": obj.get("nbrobj"),
            "nbrobjcum": obj.get("nbrobjcum")
        })
        return _obj


