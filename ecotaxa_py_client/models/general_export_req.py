# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.37
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from ecotaxa_py_client.models.export_images_options_enum import ExportImagesOptionsEnum
from ecotaxa_py_client.models.export_split_options_enum import ExportSplitOptionsEnum
from typing import Optional, Set
from typing_extensions import Self

class GeneralExportReq(BaseModel):
    """
    General purpose export request, produce a zip in a job with many options.
    """ # noqa: E501
    project_id: StrictInt = Field(description="The project to export.")
    split_by: Optional[ExportSplitOptionsEnum] = Field(default=None, description="If not none, separate (in ZIP sub-directories) output per given field.")
    with_images: Optional[ExportImagesOptionsEnum] = Field(default=None, description="Add in ZIP first (i.e. visible) image, all images, or no image.⚠️ 'all' means maybe several lines per object in TSVs.")
    with_internal_ids: Optional[StrictBool] = Field(default=False, description="Export internal database IDs.")
    with_types_row: Optional[StrictBool] = Field(default=False, description="Add an EcoTaxa-compatible second line with types.")
    only_annotations: Optional[StrictBool] = Field(default=False, description="Only save objects' last annotation data.")
    out_to_ftp: Optional[StrictBool] = Field(default=False, description="Copy result file to FTP area. Original file is still available.")
    __properties: ClassVar[List[str]] = ["project_id", "split_by", "with_images", "with_internal_ids", "with_types_row", "only_annotations", "out_to_ftp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeneralExportReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeneralExportReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "split_by": obj.get("split_by"),
            "with_images": obj.get("with_images"),
            "with_internal_ids": obj.get("with_internal_ids") if obj.get("with_internal_ids") is not None else False,
            "with_types_row": obj.get("with_types_row") if obj.get("with_types_row") is not None else False,
            "only_annotations": obj.get("only_annotations") if obj.get("only_annotations") is not None else False,
            "out_to_ftp": obj.get("out_to_ftp") if obj.get("out_to_ftp") is not None else False
        })
        return _obj


