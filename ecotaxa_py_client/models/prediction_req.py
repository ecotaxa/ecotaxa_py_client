# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PredictionReq(BaseModel):
    """
    How to predict, in details.
    """ # noqa: E501
    project_id: StrictInt = Field(description="The destination project, of which objects will be predicted.")
    source_project_ids: Annotated[List[StrictInt], Field(min_length=1)] = Field(description="The source projects, objects in them will serve as reference.")
    learning_limit: Optional[StrictInt] = Field(default=None, description="When set (to a positive value), there will be this number  of objects, _per category_, in the learning set.")
    features: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="The object features AKA free column, to use in the algorithm. Features must be common to all projects, source ones and destination one.")
    categories: Annotated[List[StrictInt], Field(min_length=1)] = Field(description="In source projects, only objects validated with these categories will be considered.")
    use_scn: Optional[StrictBool] = Field(default=False, description="Use extra features, generated using the image, for improving the prediction.")
    pre_mapping: Dict[str, StrictInt] = Field(description="Categories in keys become value one before launching the ML algorithm. Any unknown value is ignored.")
    __properties: ClassVar[List[str]] = ["project_id", "source_project_ids", "learning_limit", "features", "categories", "use_scn", "pre_mapping"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PredictionReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PredictionReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "source_project_ids": obj.get("source_project_ids"),
            "learning_limit": obj.get("learning_limit"),
            "features": obj.get("features"),
            "categories": obj.get("categories"),
            "use_scn": obj.get("use_scn") if obj.get("use_scn") is not None else False,
            "pre_mapping": obj.get("pre_mapping")
        })
        return _obj


