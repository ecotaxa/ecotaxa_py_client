# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.37
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ecotaxa_py_client.models.summary_export_quantities_options_enum import SummaryExportQuantitiesOptionsEnum
from ecotaxa_py_client.models.summary_export_sum_options_enum import SummaryExportSumOptionsEnum
from typing import Optional, Set
from typing_extensions import Self

class SummaryExportReq(BaseModel):
    """
    Summary export request.
    """ # noqa: E501
    project_id: StrictInt = Field(description="The project to export.")
    quantity: Optional[SummaryExportQuantitiesOptionsEnum] = Field(default=None, description="The quantity to compute. Abundance is always possible.")
    summarise_by: Optional[SummaryExportSumOptionsEnum] = Field(default=None, description="Computations aggregation level.")
    taxo_mapping: Optional[Dict[str, StrictInt]] = Field(default=None, description="Mapping from present taxon (key) to output replacement one (value). Use a 0 replacement to _discard_ the present taxon.")
    formulae: Optional[Dict[str, StrictStr]] = Field(default=None, description="Transitory: How to get values from DB free columns. Python syntax, prefixes are 'sam', 'ssm' and 'obj'.Variables used in computations are 'total_water_volume', 'subsample_coef' and 'individual_volume'")
    out_to_ftp: Optional[StrictBool] = Field(default=False, description="Copy result file to FTP area. Original file is still available.")
    __properties: ClassVar[List[str]] = ["project_id", "quantity", "summarise_by", "taxo_mapping", "formulae", "out_to_ftp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SummaryExportReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SummaryExportReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "quantity": obj.get("quantity"),
            "summarise_by": obj.get("summarise_by"),
            "taxo_mapping": obj.get("taxo_mapping"),
            "formulae": obj.get("formulae"),
            "out_to_ftp": obj.get("out_to_ftp") if obj.get("out_to_ftp") is not None else False
        })
        return _obj


