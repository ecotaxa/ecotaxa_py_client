# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ecotaxa_py_client.models.image_model import ImageModel
from typing import Optional, Set
from typing_extensions import Self

class ObjectModel(BaseModel):
    """
    ObjectModel
    """ # noqa: E501
    objid: StrictInt = Field(description="The object Id.")
    acquisid: StrictInt = Field(description="The parent acquisition Id.")
    classif_id: Optional[StrictInt] = Field(default=None, description="The classification Id.")
    objtime: Optional[StrictStr] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The latitude.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The longitude.")
    depth_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The min depth.")
    depth_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The min depth.")
    objdate: Optional[date] = None
    classif_qual: Optional[StrictStr] = Field(default=None, description="The classification qualification. Could be **P** for predicted, **V** for validated or **D** for Dubious.")
    sunpos: Optional[StrictStr] = Field(default=None, description="Sun position, from date, time and coords.")
    classif_when: Optional[datetime] = Field(default=None, description="The classification date.")
    classif_who: Optional[StrictInt] = Field(default=None, description="The user who manualy classify this object.")
    classif_auto_id: Optional[StrictInt] = Field(default=None, description="Set if the object was ever predicted, remain forever with these value. Reflect the 'last state' only if classif_qual is 'P'. ")
    classif_auto_when: Optional[datetime] = Field(default=None, description="Set if the object was ever predicted, remain forever with these value. Reflect the 'last state' only if classif_qual is 'P'. The classification date.")
    classif_auto_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Set if the object was ever predicted, remain forever with these value. Reflect the 'last state' only if classif_qual is 'P'. The classification auto score is generally between 0 and 1. This is a confidence score, in the fact that, the taxon prediction for this object is correct.")
    orig_id: StrictStr = Field(description="Original object ID from initial TSV load.")
    object_link: Optional[StrictStr] = Field(default=None, description="Object link.")
    complement_info: Optional[StrictStr] = None
    sample_id: StrictInt = Field(description="Sample (i.e. parent of parent acquisition) ID.")
    project_id: StrictInt = Field(description="Project (i.e. parent of sample) ID.")
    images: Optional[List[ImageModel]] = Field(default=None, description="Images for this object.")
    free_columns: Optional[Dict[str, Any]] = Field(default=None, description="Free columns from object mapping in project.")
    classif_crossvalidation_id: Optional[StrictInt] = Field(default=None, description="Always NULL, kept for compat.")
    similarity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Always NULL, kept for compat.")
    random_value: StrictInt = Field(description="Random value associated to an image")
    __properties: ClassVar[List[str]] = ["objid", "acquisid", "classif_id", "objtime", "latitude", "longitude", "depth_min", "depth_max", "objdate", "classif_qual", "sunpos", "classif_when", "classif_who", "classif_auto_id", "classif_auto_when", "classif_auto_score", "orig_id", "object_link", "complement_info", "sample_id", "project_id", "images", "free_columns", "classif_crossvalidation_id", "similarity", "random_value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "objid": obj.get("objid"),
            "acquisid": obj.get("acquisid"),
            "classif_id": obj.get("classif_id"),
            "objtime": obj.get("objtime"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "depth_min": obj.get("depth_min"),
            "depth_max": obj.get("depth_max"),
            "objdate": obj.get("objdate"),
            "classif_qual": obj.get("classif_qual"),
            "sunpos": obj.get("sunpos"),
            "classif_when": obj.get("classif_when"),
            "classif_who": obj.get("classif_who"),
            "classif_auto_id": obj.get("classif_auto_id"),
            "classif_auto_when": obj.get("classif_auto_when"),
            "classif_auto_score": obj.get("classif_auto_score"),
            "orig_id": obj.get("orig_id"),
            "object_link": obj.get("object_link"),
            "complement_info": obj.get("complement_info"),
            "sample_id": obj.get("sample_id"),
            "project_id": obj.get("project_id"),
            "images": [ImageModel.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "free_columns": obj.get("free_columns"),
            "classif_crossvalidation_id": obj.get("classif_crossvalidation_id"),
            "similarity": obj.get("similarity"),
            "random_value": obj.get("random_value")
        })
        return _obj


