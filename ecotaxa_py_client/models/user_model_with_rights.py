# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ecotaxa_py_client.models.project_summary_model import ProjectSummaryModel
from typing import Optional, Set
from typing_extensions import Self

class UserModelWithRights(BaseModel):
    """
    UserModelWithRights
    """ # noqa: E501
    id: StrictInt = Field(description="The unique numeric id of this user.")
    email: StrictStr = Field(description="User's email address, as text, used during registration.")
    password: Optional[StrictStr] = Field(default=None, description="Encrypted (or not) password.")
    name: StrictStr = Field(description="User's full name, as text.")
    organisation: Optional[StrictStr] = Field(default=None, description="User's organisation name, as text.")
    status: Optional[StrictInt] = Field(default=None, description="Status of the user : 1 for active, 0 for inactive ,2 for pending, -1 for blocked")
    status_date: Optional[datetime] = Field(default=None, description="Timestamp status modification date")
    status_admin_comment: Optional[StrictStr] = Field(default=None, description="Optional Users admininistrator comment about the account status.")
    country: Optional[StrictStr] = Field(default=None, description="The country name, as text (but chosen in a consistent list).")
    usercreationdate: Optional[datetime] = Field(default=None, description="The date of creation of the user, as text formatted according to the ISO 8601 standard.")
    usercreationreason: Optional[StrictStr] = Field(default=None, description="Paragraph describing the usage of EcoTaxa made by the user.")
    mail_status: Optional[StrictBool] = Field(default=None, description="True for verified, False for waiting for verification, None for no action.")
    mail_status_date: Optional[datetime] = Field(default=None, description="Timestamp mail status modification date")
    can_do: Optional[List[StrictInt]] = Field(default=None, description="List of User's allowed actions : 1 create a project, 2 administrate the app, 3 administrate users, 4 create taxon.")
    last_used_projects: Optional[List[ProjectSummaryModel]] = Field(default=None, description="List of User's last used projects.")
    __properties: ClassVar[List[str]] = ["id", "email", "password", "name", "organisation", "status", "status_date", "status_admin_comment", "country", "usercreationdate", "usercreationreason", "mail_status", "mail_status_date", "can_do", "last_used_projects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserModelWithRights from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in last_used_projects (list)
        _items = []
        if self.last_used_projects:
            for _item in self.last_used_projects:
                if _item:
                    _items.append(_item.to_dict())
            _dict['last_used_projects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserModelWithRights from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "email": obj.get("email"),
            "password": obj.get("password"),
            "name": obj.get("name"),
            "organisation": obj.get("organisation"),
            "status": obj.get("status"),
            "status_date": obj.get("status_date"),
            "status_admin_comment": obj.get("status_admin_comment"),
            "country": obj.get("country"),
            "usercreationdate": obj.get("usercreationdate"),
            "usercreationreason": obj.get("usercreationreason"),
            "mail_status": obj.get("mail_status"),
            "mail_status_date": obj.get("mail_status_date"),
            "can_do": obj.get("can_do"),
            "last_used_projects": [ProjectSummaryModel.from_dict(_item) for _item in obj["last_used_projects"]] if obj.get("last_used_projects") is not None else None
        })
        return _obj


