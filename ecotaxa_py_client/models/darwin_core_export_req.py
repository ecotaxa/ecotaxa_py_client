# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.37
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ecotaxa_py_client.models.sci_export_type_enum import SciExportTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class DarwinCoreExportReq(BaseModel):
    """
    Darwin Core format export request, only allowed format for a Collection. @see https://dwc.tdwg.org/
    """ # noqa: E501
    collection_id: StrictInt = Field(description="The collection to export, by its internal Id.")
    dry_run: Optional[StrictBool] = Field(default=False, description="If set, then only a diagnostic of doability will be done.")
    include_predicted: Optional[StrictBool] = Field(default=False, description="If set, then predicted objects, as well as validated ones, will be exported. A validation status will allow to distinguish between the two possible statuses.")
    with_absent: Optional[StrictBool] = Field(default=False, description="If set, then *absent* records will be generated, in the relevant samples, for categories present in other samples.")
    with_computations: Optional[List[SciExportTypeEnum]] = Field(default=None, description="Compute organisms abundances (ABO), concentrations (CNC) or biovolumes (BIV). Several possible.")
    computations_pre_mapping: Optional[Dict[str, StrictInt]] = Field(default=None, description="Mapping from present taxon (key) to output replacement one (value), during computations. Use a 0 replacement to _discard_ the objects with present taxon. Note: These are EcoTaxa categories, WoRMS mapping happens after, whatever.")
    formulae: Optional[Dict[str, StrictStr]] = Field(default=None, description="Transitory: How to get values from DB free columns. Python syntax, prefixes are 'sam', 'ssm' and 'obj'. Variables used in computations are 'total_water_volume', 'subsample_coef' and 'individual_volume'")
    extra_xml: Optional[List[StrictStr]] = Field(default=None, description="XML blocks which will be output, reformatted, inside the <dataset> tag of produced EML. Formal schema is in dataset section of: https://eml.ecoinformatics.org/schema/eml_xsd ")
    __properties: ClassVar[List[str]] = ["collection_id", "dry_run", "include_predicted", "with_absent", "with_computations", "computations_pre_mapping", "formulae", "extra_xml"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DarwinCoreExportReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DarwinCoreExportReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collection_id": obj.get("collection_id"),
            "dry_run": obj.get("dry_run") if obj.get("dry_run") is not None else False,
            "include_predicted": obj.get("include_predicted") if obj.get("include_predicted") is not None else False,
            "with_absent": obj.get("with_absent") if obj.get("with_absent") is not None else False,
            "with_computations": obj.get("with_computations"),
            "computations_pre_mapping": obj.get("computations_pre_mapping"),
            "formulae": obj.get("formulae"),
            "extra_xml": obj.get("extra_xml")
        })
        return _obj


