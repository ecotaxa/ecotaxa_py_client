# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.37
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JobModel(BaseModel):
    """
    All information about the Job.
    """ # noqa: E501
    params: Optional[Dict[str, Any]] = Field(default=None, description="Creation parameters.")
    result: Optional[Dict[str, Any]] = Field(default=None, description="Final result of the run.")
    errors: Optional[List[StrictStr]] = Field(default=None, description="The errors seen during last step.")
    question: Optional[Dict[str, Any]] = Field(default=None, description="The data provoking job move to Asking state.")
    reply: Optional[Dict[str, Any]] = Field(default=None, description="The data provided as a reply to the question.")
    inside: Optional[Dict[str, Any]] = Field(default=None, description="Internal state of the job.")
    id: StrictInt = Field(description="Job unique identifier.")
    owner_id: StrictInt = Field(description="The user who created and thus owns the job. ")
    type: StrictStr = Field(description="The job type, e.g. import, export... ")
    state: Optional[StrictStr] = Field(default=None, description="What the job is doing. Could be 'P' for Pending (Waiting for an execution thread), 'R' for Running (Being executed inside a thread), 'A' for Asking (Needing user information before resuming), 'E' for Error (Stopped with error), 'F' for Finished (Done).")
    step: Optional[StrictInt] = Field(default=None, description="Where in the workflow the job is. ")
    progress_pct: Optional[StrictInt] = Field(default=None, description="The progress percentage for UI. ")
    progress_msg: Optional[StrictStr] = Field(default=None, description="The message for UI, short version. ")
    creation_date: datetime = Field(description="The date of creation of the Job, as text formatted according to the ISO 8601 standard.")
    updated_on: datetime = Field(description="Last time that anything changed in present line. ")
    __properties: ClassVar[List[str]] = ["params", "result", "errors", "question", "reply", "inside", "id", "owner_id", "type", "state", "step", "progress_pct", "progress_msg", "creation_date", "updated_on"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "params": obj.get("params"),
            "result": obj.get("result"),
            "errors": obj.get("errors"),
            "question": obj.get("question"),
            "reply": obj.get("reply"),
            "inside": obj.get("inside"),
            "id": obj.get("id"),
            "owner_id": obj.get("owner_id"),
            "type": obj.get("type"),
            "state": obj.get("state"),
            "step": obj.get("step"),
            "progress_pct": obj.get("progress_pct"),
            "progress_msg": obj.get("progress_msg"),
            "creation_date": obj.get("creation_date"),
            "updated_on": obj.get("updated_on")
        })
        return _obj


